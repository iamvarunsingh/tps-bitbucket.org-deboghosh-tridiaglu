PARALLEL (MPI) DIRECT SOLVER FOR A TRIDIAGONAL SYSTEM OF EQUATIONS

The following functions are available in src/TridiagLU (/include as the 
required header file):-

  tridiagLU  (a,b,c,x,n,ns,r,m) (Parallel tridiagonal solver)

    Solves the tridiagonal system in parallel by reordering the
    points such that the first point of each subdomain is placed
    at the end.

    The interior points are eliminated in parallel, resulting in
    a reduced system consisting of the first point of each sub-
    domain.

    This reduced system is solved either by the gather-and-
    solve (tridiagLUGS) or the recursive-doubling (tridiagLURD)
    algorithms.

  tridiagLUGS(a,b,c,x,n,ns,r,m) (Tridiagonal solver using the
                                 gather-and-solve strategy)

    Each of the "ns" systems is gathered on one processor, 
    solved in serial, and the solution scattered back. The
    parallelism lies in solving the "ns" different systems 
    by multiple processors (i.e., each processor solves 
    ~ns/nproc number of systems in serial).

** A test code is provided in /src/Test to check the tridiagonal
   solvers and test the walltimes.

------------------------------------------------------------------------

REFERENCES:-

tridiagLU() solves the parallel tridiagonal system by rearranging the 
equations such that the last points of each sub-domain are grouped at
the end. See doc/algorithm.pdf for a rough sketch.

------------------------------------------------------------------------

COMPILING:-

If obtained by cloning the GIT/SVN repository, run these commands:-
> autoreconf -i

This will generate the required files for:
> [CFLAGS="..."] ./configure [--with-mpidir=/path/to/mpi] [--prefix=/install/dir]
> make
> make install

If unpacked from tarball, then proceed with ./configure, make and
make install.

** To compile a serial version: use -Dserial as the compile flag

------------------------------------------------------------------------

TESTING:-

The tridiagonal solvers can be tested by running bin/TRIDIAGLU that is 
created by a successful compilation.

USING THESE FUNCTIONS:-

Copy the header file include/tridiagLU.h to the include folder of
the code calling these functions. Copy the files 
src/TridiagLU/tridiagLU.c
src/TridiagLU/tridiagLUGS.c
to the the code's src directory and include them while compiling.

*OR*

Place include/tridiagLU.h where the compiler can find it
(or use the compiler flag "-I/path/to/tridiagLU.h" while
compiling) and include $build_dir/src/TridiagLU/libTridiagLU.a 
while linking.

------------------------------------------------------------------------

FUNCTION ARGUMENTS:

    a   [0,ns-1]x[0,n-1] double**         subdiagonal entries
    b   [0,ns-1]x[0,n-1] double**         diagonal entries
    c   [0,ns-1]x[0,n-1] double**         superdiagonal entries
    x   [0,ns-1]x[0,n-1] double**         right-hand side (solution)
    n                    int              local size of the system
    ns                   int              number of systems to solve
    r                    TridiagLUTime*   structure containing the runtimes
                                            total_time
                                            stage1_time
                                            stage2_time
                                            stage3_time
                                            stage4_time
                         ** Note that these are process-specific. Calling 
                            function needs to do something to add/average 
                            them to get some global value.
                         ** Can be NULL if runtimes are not needed.
    m                    MPIContext*         MPI Context
                                             **See below
                                             **Can be set to NULL for
                                               a serial computation

  Return value (int) -> 0 (successful solve), -1 (singular system)

  Note:-
    x contains the final solution (right-hand side is replaced)
    a,b,c are not preserved
    On rank=0,        a[0] has to be zero.
    On rank=nproc-1,  c[n-1] has to be zero.

  For a serial tridiagonal solver, compile with the flag "-Dserial"
  or send NULL as the argument for the MPI Context.

------------------------------------------------------------------------

MPI CONTEXT:

The last argument for the functions is a pointer to an object of type
MPIContext (see header file for definition). This object contains the 
following:-
  rank      rank of this process with respect to the processes parti-
            cipating in the tridiagonal solve
  nproc     number of processes participating in the tridiagonal solve
  comm      MPI communicator

** Setting this object to NULL implies a serial run
------------------------------------------------------------------------
