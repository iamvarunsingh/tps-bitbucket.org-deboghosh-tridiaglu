PARALLEL (MPI) DIRECT SOLVER FOR A TRIDIAGONAL SYSTEM OF EQUATIONS

The following functions are available in src/TridiagLU (include has the 
required header file):-

  tridiagLU  (a,b,c,x,n,ns,r,m) (Parallel tridiagonal solver)

    Solves the tridiagonal system in parallel by reordering the
    points such that the first point of each subdomain is placed
    at the end.

    The interior points are eliminated in parallel, resulting in
    a reduced system consisting of the first point of each sub-
    domain.

    This reduced system is solved either by the gather-and-
    solve (tridiagLUGS) or the recursive-doubling (tridiagLURD)
    algorithms.

  tridiagLUGS(a,b,c,x,n,ns,r,m) (Tridiagonal solver using the
                                 gather-and-solve strategy)

    Each of the "ns" systems is gathered on one processor, 
    solved in serial, and the solution scattered back. The
    parallelism lies in solving the "ns" different systems 
    by multiple processors (i.e., each processor solves 
    ~ns/nproc number of systems in serial).

  tridiagIterJacobi(a,b,c,x,n,ns,r,m) (Iterative tridiagonal solver 
                                       using the Jacobi method)
    The system is solved iteratively.

** A test code is provided in /src/Test to check the tridiagonal
   solvers and test the walltimes.

------------------------------------------------------------------------

REFERENCES:-

tridiagLU() solves the parallel tridiagonal system by rearranging the 
equations such that the last points of each sub-domain are grouped at
the end. See doc/algorithm.pdf for a rough sketch.

tridiagLU() solves the parallel tridiagonal system of equations by 
rearranging the points. One stage requires the solution of a reduced
system of equations of size nproc (number of processors), where one row
resides on each process.

The reduced system can be solved by 
+ tridiagLUGS() (direct)
+ tridiagIterJacobi() (iterative)

This choice can be specified by the member "reducedsolvetype" in the
TridiagLU structure.

Typically, the reduced system is *strongly* diagonally dominant and an
iterative solution is very efficient.

------------------------------------------------------------------------

COMPILING:-

If obtained by cloning the GIT/SVN repository, run these commands:-
> autoreconf -i

This will generate the required files for:
> [CFLAGS="..."] ./configure [--with-mpidir=/path/to/mpi] [--prefix=/install/dir]
> make
> make install

If unpacked from tarball, then proceed with ./configure, make and
make install.

** To compile a serial version: use -Dserial as the compile flag

------------------------------------------------------------------------

TESTING:-

The tridiagonal solvers can be tested by running bin/TRIDIAGLU that is 
created by a successful compilation. It runs a series of tests by gener-
ating random tridiagonal matrices and right-hand sides.

USING THESE FUNCTIONS:-

Copy the header file include/tridiagLU.h to the include folder of
the code calling these functions. Copy the *.c files in 
src/TridiagLU/ to the the code's src directory and include them 
while compiling.

*OR*

Place include/tridiagLU.h where the compiler can find it
(or use the compiler flag "-I/path/to/tridiagLU.h" while
compiling) and include $build_dir/src/TridiagLU/libTridiagLU.a 
while linking.

------------------------------------------------------------------------

FUNCTION ARGUMENTS:

    a   [0,ns-1]x[0,n-1] double**         subdiagonal entries
    b   [0,ns-1]x[0,n-1] double**         diagonal entries
    c   [0,ns-1]x[0,n-1] double**         superdiagonal entries
    x   [0,ns-1]x[0,n-1] double**         right-hand side (solution)
    n                    int              local size of the system
    ns                   int              number of systems to solve
    r                    TridiagLU*       structure for tridiagonal solver
                                          parameters 
                                          (see include/tridiagLU.h for
                                           more details)
    m                    MPI_Comm*        MPI Communicator

  Return value (int) -> 0 (successful solve), -1 (singular system)

  Note:-
    x contains the final solution (right-hand side is replaced)
    a,b,c are not preserved
    On rank=0,        a[0] has to be zero.
    On rank=nproc-1,  c[n-1] has to be zero.

  For a serial tridiagonal solver, compile with the flag "-Dserial"
  or send NULL as the argument for the MPI Communicator.

------------------------------------------------------------------------

INPUT FILE FOR TRIDIAGLU():

An input file "lusolver.inp" of the following form (the text between the
<< and >>) is needed:

<<
begin
  reducedsolvetype  jacobi
  evaluate_norm     1
  maxiter           10
  atol              1e-12
  rtol              1e-10
  verbose           1
end
>>

Keywords:
+ reducedsolvetype  -> method to solve the reduced system
                       "gather-and-solve" - direct solution using tridiagLUGS()
                       "jacobi" - iterative solution using tridiagIterJacobi()
+ evaluate_norm     -> whether to evaluate error norm every iteration for the 
                       iterative solver (turn this off for better scalability)
+ maxiter           -> maximum number of iterations for the iterative solver
+ atol,rtol         -> absolute and relative tolerances for the iterative 
                       solver
+ verbose           -> whether to print iteration and norm information on 
                       screen

------------------------------------------------------------------------

INPUT FILE FOR THE TEST FUNCTION:

An input file "input" is required with three integers:
- Global size of the system
- Number of systems
- Number of solves for walltime measurement

Eg:
<<
1000  20  50
>>

i.e. solve 20 systems of size 1000, 50 times.

------------------------------------------------------------------------
